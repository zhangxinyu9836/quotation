# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QErUZiSleSIddNrPbSEv0Z0Otcw85ja2
"""

pip install jqdatasdk

!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz 
!tar xvzf ta-lib-0.4.0-src.tar.gz
import os
os.chdir('ta-lib') 
!./configure --prefix=/usr
!make
!make install

os.chdir('../')
!pip install TA-Lib

import jqdatasdk as jq
jq.auth("15756224157","19980306zxyYU")

import pandas as pd
import numpy as np
import time
import datetime
import os
import talib

code1 = 'P'
code2 = 'Y'
short_win = 6    # 短期EMA平滑天数
long_win  = 12    # 长期EMA平滑天数
macd_win  = 9     # DEA线平滑天数

##整理数据
code_1 = pd.read_csv(os.path.join('/content/drive/MyDrive/new2',code1+'.csv'),index_col=0)
code_2 = pd.read_csv(os.path.join('/content/drive/MyDrive/new2',code2+'.csv'),index_col=0)
relate = pd.read_csv(os.path.join('/content/drive/MyDrive/new3',code1+'_'+code2+'.csv'),index_col=0)
macd_tmp = talib.MACD(relate.clean, fastperiod=short_win, slowperiod=long_win, signalperiod=macd_win)
DIF = macd_tmp[0]
DEA = macd_tmp[1]
MACD = macd_tmp[2]
relate['DIF'] = DIF
relate['DEA'] = DEA
relate.dropna(axis=0,how="all")

#计算信号
for idx in range(len(relate.index)):
    relate.loc[relate.index[idx], 'signal'] = 0
    if idx > 0:
        today,yesterday = relate.index[idx],relate.index[idx-1]
        DIF,DEA = relate.loc[today,'DIF'],relate.loc[today,'DEA']
        
        relate.loc[today, 'signal'] = 0
        if DIF and DEA:
            
            if DIF > DEA and (pd.isnull(relate.loc[yesterday,'DIF'])  or relate.loc[yesterday,'DIF']<=relate.loc[yesterday,'DEA']):
                relate.loc[today,'signal'] = 1
            elif DIF < DEA and ( pd.isnull(relate.loc[yesterday,'DIF'])  or relate.loc[yesterday, 'DIF'] >= relate.loc[yesterday, 'DEA']):
                relate.loc[today, 'signal'] = -1

#计算净值序列
def clean_data(code):
    path = os.path.join('/content/drive/MyDrive/new1',code+'.csv')
    data = pd.read_csv(path, index_col=0)
    index = data.index
    for num in range(len(index)):
        if num == 0:
            data.loc[index[num],'clean'] = 1
        if num > 0:
            last_day, today = index[num - 1], index[num]
            data.loc[today, 'clean'] = data.loc[today, 'close']/data.loc[today, 'last_close_price']
    return data.clean

#计算收益率
P_clean = clean_data('P')
Y_clean = clean_data('Y')

continue_signal = False
for idx in range(len(relate.index)):
    if idx == 0:
        relate.loc[relate.index[idx], 'profit_history'] = 1
        relate.loc[relate.index[idx], ['P_assert','Y_assert']] = [0.5,0.5]
    else:
        today, yesterday = relate.index[idx], relate.index[idx - 1]
        relate.loc[today,'profit_history'] = relate.loc[yesterday,'profit_history']
        relate.loc[today, ['P_assert','Y_assert']] = relate.loc[yesterday, ['P_assert','Y_assert']]
        if continue_signal:
            relate.loc[today,'P_assert'] = relate.loc[yesterday,'P_assert']*P_clean[today]
            relate.loc[today,'Y_assert'] = relate.loc[yesterday,'Y_assert']*(2-Y_clean[today])
            relate.loc[today, 'profit_history'] = relate.loc[today,'P_assert']+relate.loc[today,'Y_assert']
        if relate.loc[today,'signal'] == 1:
            continue_signal = True
            relate.loc[relate.index[idx], ['P_assert','Y_assert']] = [0.5*relate.loc[today,'profit_history']]*2    
        if relate.loc[today, 'signal'] == -1:
            continue_signal = False

relate

save_path = os.path.join('/content/drive/MyDrive/ways','way1.csv')
relate.to_csv(save_path, index=True)