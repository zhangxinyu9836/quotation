import numpy as np
import pandas as pd
import os
import math
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.patches as patches
def withdraw(relate):
    _dp = 0  # 使用 _dp 表示 i 点的最大回撤
    i_high = 0  # 遍历时，0 ~ i - 1 中最高的点的索引，注意是索引

    # 全局最大回撤和对应的最高点和最低点的索引，注意是索引
    g_withdraw, g_high, g_low = float('-inf'), -1, -1
    arr = relate.profit_history.tolist()
    for i in range(1, len(arr)):
        # 注意：此处求的是
        if arr[i_high] < arr[i - 1]:  # 若 0 ~ i - 1 中最高的点小于当前点
            i_high = i - 1  # 0 ~ i - 1 中最高的点的索引

        _dp = arr[i_high] - arr[i]  # _dp 表示 i 点的最大回撤
        if _dp > g_withdraw:  # 找到新的最大回撤，更新三个值
            g_withdraw = _dp
            g_high = i_high
            g_low = i

    return g_withdraw, g_high, g_low
def mkt_profit_plot(relate, save_path, sec, scatter):
    __color_balck__, __color_green__ = '#0F0F0F', '#00FFFF'
    __color_yellow__, __color_purple__ = '#EE9A00', '#9900CC'
    __linewidth__ = 2
    [g_withdraw, max_x, min_x] = scatter
    fig1 = plt.figure(figsize=(11, 5))
    ax11 = fig1.add_axes([0, 1, 1, 1])
    print(max_x)

    ax11.set_title(
        sec + '---' + 'the largest withdraw is {:.2%}'.format(g_withdraw / relate.profit_history.iloc[max_x]),
        fontsize=15)

    ax11.grid(True, axis='y')
    ax11.set_xlim(-1, len(relate) + 1)
    ax11.set_title("profit_history", fontsize=15, loc='left', color='r')
    # 设置x轴标签
    ax11.set_xticks(range(0, len(relate), int(len(relate) / 5)))  # 位置
    ax11.set_xticklabels([(relate.index[i]) for i in ax11.get_xticks()], rotation=20)  # 标签内容
    ax11.plot(relate.profit_history, color=__color_balck__, linewidth=__linewidth__)
    ax11.axhline(1.0, color="red", linestyle='--')
    ax11.legend(loc='upper left')
    min_y, max_y = relate.profit_history.iloc[min_x], relate.profit_history.iloc[max_x]
    plt.scatter(min_x, relate.profit_history.iloc[min_x], color='r')  # 标记最低点
    plt.scatter(max_x, relate.profit_history.iloc[max_x], color='r')  # 标记最高点
    plt.annotate(f'bottom:{relate.profit_history.index[min_x]}', xytext=(min_x, min_y), xy=(min_x, min_y))  # 标记提示
    plt.annotate(f'peak:{relate.profit_history.index[max_x]}', xytext=(max_x, max_y), xy=(max_x, max_y))  # 标记提示

    plt.plot([min_x, max_x], [min_y, max_y], color='b', linestyle='--')

    fig1.savefig(os.path.join(save_path, sec+'_profit_history.png'), dpi=1000, bbox_inches='tight')

def eval(relate,strategy,today):
    path = os.path.join('/content/drive/MyDrive/relate_future', relate, relate + '_' + strategy + '_data.csv')
    data = pd.read_csv(path, index_col=0)
    try:
      if data.index[0] < today:
          ind_list = data.index.tolist()
          ind = ind_list.index(today)
          if ind > 60:
              n = (ind+1) / 250
              AnnualReturn = pow(data.profit_history.iloc[ind], 1 / n) - 1
              roll_max = data.profit_history.iloc[:ind+1].expanding().max()
              MaxDrawdown = -1 * np.min(data.profit_history.iloc[:ind+1] / roll_max - 1)
              return AnnualReturn/MaxDrawdown
          else:
              return -float('inf')
      else:
        return -float('inf')
    except:
      return -float('inf')

def profit(relate_list, strategy, time_aix):
  day_index = 250
  profit_list = []
  profit_final = pd.DataFrame(columns=['profit_history'],index = time_aix)

  while day_index <= len(time_aix):
    today = time_aix[day_index]
    eval_list = []
    for relate in relate_list:
        eval_list.append(eval(relate,strategy,today))
    select_stack = []
    select_stack_profit = []
    profit_pd = pd.DataFrame()
    for i in range(len(eval_list)):
        if eval_list[i] > 0:
            relate = relate_list[i]
            path = os.path.join('/content/drive/MyDrive/relate_future', relate,
                                relate + '_' + strategy + '_data.csv')
            relate_data = pd.read_csv(path, index_col=0)
            ind_list = relate_data.index.tolist()
            ind = ind_list.index(today)
            if ind+63 >= len(ind_list):
              profit_pd.insert(0,relate,relate_data.profit_history.iloc[ind:len(ind_list)]/relate_data.profit_history.iloc[ind])
              profit_pd[relate].iloc[(len(ind_list)-ind):64] = profit_pd[relate].iloc[len(ind_list)-ind-1]
            else:
              profit_pd.insert(0,relate,relate_data.profit_history.iloc[ind:(ind+64)]/relate_data.profit_history.iloc[ind])      
    profit_pd['profit'] = profit_pd.mean(axis = 1)
    #profit_pd.profit.iloc[0]=1
    
    if day_index+63 >= len(time_aix):
      profit_pd.profit *=profit_final.profit_history.iloc[day_index] 
      profit_final.profit_history.iloc[day_index:len(time_aix)] = profit_pd.profit.tolist()
    else:
      if day_index == 250:
        profit_final.profit_history.iloc[day_index:(day_index+64)] = profit_pd.profit.tolist()
      else:
        profit_pd.profit *=profit_final.profit_history.iloc[day_index] 
        profit_final.profit_history.iloc[day_index:(day_index+64)] = profit_pd.profit.tolist()
    day_index += 63
  #profit_final
  profit_final.dropna(axis=0, how='any', inplace=True)
  save_path = '/content/drive/MyDrive/portfolio_profit'

#make_dir(save_path)
  profit_final.to_csv(os.path.join('/content/drive/MyDrive/portfolio_profit', strategy+'.csv'), index=True)
  g_withdraw, g_high, g_low = withdraw(profit_final)
  #mkt_plot(relate, save_path, relate_twin)
  mkt_profit_plot(profit_final, save_path, strategy, [g_withdraw, g_high, g_low])

def main():
  #寻找时间节点
  path = os.path.join('/content/drive/MyDrive/relate_future', 'P_Y', 'P_Y_KDJ_data.csv')
  data = pd.read_csv(path, index_col=0)
  time_aix = data.index
  relate_list = ['AG_AU', 'AL_CU', 'AL_ZN', 'B_M', 'BC_AL', 'BC_CU', 'BC_ZN', 'BU_EB', 'BU_EG', 'BU_PF', 'BU_TA',
                'C_CS', 'CF_CY', 'CF_PF', 'CU_NI', 'CU_PB', 'CU_RU', 'CU_SN', 'CU_ZN', 'EG_EB', 'FG_SA', 'HC_I',
                'HC_J', 'HC_JM', 'HC_RB', 'I_J', 'I_JM', 'J_JM', 'L_EB', 'L_EG', 'L_PP', 'L_V', 'LU_BU', 'LU_PF',
                'LU_PG', 'LU_TA', 'MA_EG', 'MA_L', 'MA_PP', 'MA_TA', 'NI_SS', 'NR_CF', 'NR_RU', 'OI_P', 'OI_Y',
                'P_Y', 'PB_ZN', 'PF_EB', 'PF_EG', 'PF_L', 'PF_PG', 'PF_PP', 'PP_EB', 'PP_EG', 'PP_V', 'RB_FG',
                'RB_I', 'RB_J', 'RB_JM', 'RM_B', 'RM_M', 'SC_BU', 'SC_FU', 'SC_LU', 'SC_PF', 'SC_TA', 'SF_SM',
                'TA_EB', 'TA_EG', 'TA_PF', 'TA_PG', 'TA_PP', 'ZC_J', 'ZC_JM']
  strategy_list = ['SMA', 'EMA', 'WMA', 'DEMA', 'KAMA', 'MESA', 'MIDPOINT', 'SAR', 'TRIMA', 'BollingerBand+TR',
                  'BollingerBand+ATR', 'BollingerBand+NATR', 'MACD_', 'KDJ', 'APO', 'AROON', 'CCI', 'CMO', 'MOM',
                  'ROC', 'RSI', 'TRIX', 'AD+KDJ', 'ADOSC', 'OBV']
  for strategy in strategy_list:
    profit(relate_list, strategy, time_aix)

if __name__ == '__main__':
  main()
