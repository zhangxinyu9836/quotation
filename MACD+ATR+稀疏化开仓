from sys import platform
import pandas as pd
import numpy as np
import time
import datetime
import os
import talib
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import random


def withdraw(relate):
    _dp = 0  # 使用 _dp 表示 i 点的最大回撤
    i_high = 0  # 遍历时，0 ~ i - 1 中最高的点的索引，注意是索引

    # 全局最大回撤和对应的最高点和最低点的索引，注意是索引
    g_withdraw, g_high, g_low = float('-inf'), -1, -1
    arr = relate.profit_history.tolist()
    for i in range(1, len(arr)):
        # 注意：此处求的是
        if arr[i_high] < arr[i - 1]:  # 若 0 ~ i - 1 中最高的点小于当前点
            i_high = i - 1  # 0 ~ i - 1 中最高的点的索引

        _dp = arr[i_high] - arr[i]  # _dp 表示 i 点的最大回撤
        if _dp > g_withdraw:  # 找到新的最大回撤，更新三个值
            g_withdraw = _dp
            g_high = i_high
            g_low = i

    return g_withdraw, g_high, g_low


def mkt_plot(quotes, save_path, sec):  # quotes:行情数据-Dateframe类型    sec：标题
    __color_balck__, __color_green__ = '#0F0F0F', '#00FFFF'
    __color_yellow__, __color_purple__ = '#EE9A00', '#9900CC'
    __linewidth__ = 2

    fig = plt.figure(figsize=(11, 5))

    ax1 = fig.add_axes([0, 1, 1, 1])
    ax1.set_title(sec, fontsize=15)

    ax1.grid(True, axis='y')
    ax1.set_xlim(-1, len(quotes) + 1)
    ax1.set_title("Price_diff", fontsize=15, loc='left', color='r')
    # 设置x轴标签

    ax1.set_xticks(range(0, len(quotes), int(len(quotes) / 5)))  # 位置
    ax1.set_xticklabels([(quotes.index[i]) for i in ax1.get_xticks()], rotation=20)  # 标签内容
    ax1.plot(quotes.clean, color='b', linewidth=__linewidth__, label='price_diff')
    # MACD
    # macd, macdsignal, macdhist = talib.MACD(np.array(quotes['clean']), fastperiod=6, slowperiod=12, signalperiod=9)
    # 参数6,12,9分别为短期EMA的窗宽 中长期EMA窗宽 以及计算DEA的窗宽   macd, macdsignal, machhist分别为上面所说的DIF DEA 和DIF-DEA
    ax2 = ax1.twinx()  # 增加一根y轴
    ax2.set_xlim(-1, len(quotes) + 1)
    ax2.set_title("Price_diff", fontsize=15, loc='left', color='r')
    # 设置x轴标签

    ax2.set_xticks(range(0, len(quotes), int(len(quotes) / 5)))  # 位置
    ax2.set_xticklabels([(quotes.index[i]) for i in ax2.get_xticks()], rotation=20)
    # ax2.plot(macd, color=__color_yellow__, linewidth=__linewidth__, label='DIF')
    # ax2.plot(macdsignal, color='b', linewidth=__linewidth__, label='DEA')
    ax2.plot(quotes.MACD, color=__color_purple__, linewidth=__linewidth__, label='DIF-DEA')
    ax2.axhline(0.0, color="red", linestyle='--')
    # 图例
    ax1.legend(loc='upper left')
    ax2.legend(loc='upper right')
    fig.savefig(os.path.join(save_path, 'signal_fig.png'), dpi=1000, bbox_inches='tight')


def mkt_profit_plot(relate, save_path, sec, scatter):
    __color_balck__, __color_green__ = '#0F0F0F', '#00FFFF'
    __color_yellow__, __color_purple__ = '#EE9A00', '#9900CC'
    __linewidth__ = 2
    [g_withdraw, max_x, min_x] = scatter
    fig1 = plt.figure(figsize=(11, 5))
    ax11 = fig1.add_axes([0, 1, 1, 1])
    print(max_x)

    ax11.set_title(
        sec + '---' + 'the largest withdraw is {:.2%}'.format(g_withdraw / relate.profit_history.iloc[max_x]),
        fontsize=15)

    ax11.grid(True, axis='y')
    ax11.set_xlim(-1, len(relate) + 1)
    ax11.set_title("profit_history", fontsize=15, loc='left', color='r')
    # 设置x轴标签
    ax11.set_xticks(range(0, len(relate), int(len(relate) / 5)))  # 位置
    ax11.set_xticklabels([(relate.index[i]) for i in ax11.get_xticks()], rotation=20)  # 标签内容
    ax11.plot(relate.profit_history, color=__color_balck__, linewidth=__linewidth__, label='MACD_both_ATR')
    ax11.axhline(1.0, color="red", linestyle='--')
    ax11.legend(loc='upper left')
    min_y, max_y = relate.profit_history.iloc[min_x], relate.profit_history.iloc[max_x]
    plt.scatter(min_x, relate.profit_history.iloc[min_x], color='r')  # 标记最低点
    plt.scatter(max_x, relate.profit_history.iloc[max_x], color='r')  # 标记最高点
    plt.annotate(f'bottom:{relate.profit_history.index[min_x]}', xytext=(min_x, min_y), xy=(min_x, min_y))  # 标记提示
    plt.annotate(f'peak:{relate.profit_history.index[max_x]}', xytext=(max_x, max_y), xy=(max_x, max_y))  # 标记提示

    plt.plot([min_x, max_x], [min_y, max_y], color='b', linestyle='--')

    fig1.savefig(os.path.join(save_path, 'profit_history.png'), dpi=1000, bbox_inches='tight')


def window(pd, length, end_ind):
    if end_ind - length + 1 < 0:
        pd1 = pd.clean.iloc[0:end_ind + 1]
    else:
        pd1 = pd.clean.iloc[(end_ind - length + 1):end_ind + 1]
    return [pd1.min(), pd1.max(), pd.clean.iloc[end_ind]]


def clean_data(code):  # 计算收盘比值序列
    path = os.path.join('/content/drive/MyDrive/new1', code + '.csv')
    data = pd.read_csv(path, index_col=0)
    index = data.index
    for num in range(len(index)):
        if num == 0:
            data.loc[index[num], 'clean'] = 1
        if num > 0:
            last_day, today = index[num - 1], index[num]
            data.loc[today, 'clean'] = data.loc[today, 'close'] / data.loc[today, 'last_close_price']
    return data.clean


def make_dir(path):
    if not os.path.exists(path):
        os.mkdir(path)


def down_open(relate):
    #relate.loc[:,'down_open_signal'] = relate.signal
    last_gold_idx,last_dead_idx = 0,0
    gold_stack,dead_stack = [],[]
    for idx in range(len(relate.index)):
        if relate.signal.iloc[idx] == 1:
            if last_dead_idx == 0:
                last_gold_idx == idx
            else:
                last_gold_idx == idx
                dead_stack.append(idx-last_dead_idx)
                mean_val = np.mean(gold_stack)
                if gold_stack and gold_stack[-1]>mean_val:
                    relate.signal.iloc[idx] = 2
        if relate.signal.iloc[idx] == -1:
            if last_gold_idx == 0:
                last_dead_idx == idx
            else:
                last_dead_idx == idx
                gold_stack.append(idx - last_gold_idx)
                mean_val = np.mean(dead_stack)
                if dead_stack and dead_stack[-1] > mean_val:
                    relate.signal.iloc[idx] = 2
    return relate



def MACD_BOTH_ATR(relate_twin, cost):
    relate = pd.read_csv(os.path.join('/content/drive/MyDrive/new3', relate_twin + '.csv'), index_col=0)
    relate = relate.dropna()
    print(relate.index[0])
    [code1, code2] = relate_twin.split('_')
    print(code1, code2)
    code_1 = pd.read_csv(os.path.join('/content/drive/MyDrive/new2', code1 + '.csv'), index_col=0)
    code_2 = pd.read_csv(os.path.join('/content/drive/MyDrive/new2', code2 + '.csv'), index_col=0)
    code_1 = code_1.dropna()
    code_2 = code_2.dropna()
    macd_tmp = talib.MACD(relate.clean, fastperiod=6, slowperiod=12, signalperiod=9)
    DIF = macd_tmp[0]
    DEA = macd_tmp[1]
    MACD = macd_tmp[2]
    relate['DIF'] = DIF
    relate['DEA'] = DEA
    relate['MACD'] = MACD

    # 计算MACD信号
    for idx in range(len(relate.index)):
        relate.loc[relate.index[idx], 'signal'] = 0
        if idx > 0:
            today, yesterday = relate.index[idx], relate.index[idx - 1]
            DIF, DEA = relate.loc[today, 'DIF'], relate.loc[today, 'DEA']

            relate.loc[today, 'signal'] = 0
            if DIF and DEA:

                if DIF > DEA and (pd.isnull(relate.loc[yesterday, 'DIF']) or relate.loc[yesterday, 'DIF'] <= relate.loc[
                    yesterday, 'DEA']):
                    relate.loc[today, 'signal'] = 1
                elif DIF < DEA and (
                        pd.isnull(relate.loc[yesterday, 'DIF']) or relate.loc[yesterday, 'DIF'] >= relate.loc[
                    yesterday, 'DEA']):
                    relate.loc[today, 'signal'] = -1
    # 计算ATR和TR
    for idx in range(len(relate.index)):
        today = relate.index[idx]
        relate.loc[today, ['low', 'high', 'close']] = window(relate, 6, idx)
    atr = talib.ATR(relate.high, relate.low, relate.close, timeperiod=12)
    tr = talib.TRANGE(relate.high, relate.low, relate.close)
    relate.loc[:, 'ATR'] = atr
    relate.loc[:, 'TR'] = tr

    #减少开盘次数
    relate = down_open(relate)

    # 计算历史收益率
    P_clean = clean_data(code1)
    Y_clean = clean_data(code2)

    gold_signal = False
    dead_signal = False
    gold_atr_threshold, dead_atr_threshold = 0, 0
    for idx in range(len(relate.index)):
        if idx == 0:
            relate.loc[relate.index[idx], 'profit_history'] = 1
            relate.loc[relate.index[idx], ['P_assert', 'Y_assert']] = [0.5, 0.5]
        else:
            P_cost = 3 * cost.loc[code1] / code_1.close.loc[today]
            Y_cost = 3 * cost.loc[code2] / code_2.close.loc[today]
            today, yesterday = relate.index[idx], relate.index[idx - 1]
            relate.loc[today, 'profit_history'] = relate.loc[yesterday, 'profit_history']
            relate.loc[today, ['P_assert', 'Y_assert']] = relate.loc[yesterday, ['P_assert', 'Y_assert']]
            if gold_signal:
                relate.loc[today, 'P_assert'] = relate.loc[yesterday, 'P_assert'] * P_clean.loc[today]
                relate.loc[today, 'Y_assert'] = relate.loc[yesterday, 'Y_assert'] * (2 - Y_clean.loc[today])
                relate.loc[today, 'profit_history'] = relate.loc[today, 'P_assert'] + relate.loc[today, 'Y_assert']
                if relate.loc[today, 'clean'] < gold_atr_threshold:
                    gold_signal = False
            if dead_signal:

                relate.loc[today, 'P_assert'] = relate.loc[yesterday, 'P_assert'] * (2 - P_clean.loc[today])
                relate.loc[today, 'Y_assert'] = relate.loc[yesterday, 'Y_assert'] * Y_clean.loc[today]
                relate.loc[today, 'profit_history'] = relate.loc[today, 'P_assert'] + relate.loc[today, 'Y_assert']
                if relate.loc[today, 'clean'] > dead_atr_threshold:
                    dead_signal = False
            if relate.loc[today, 'signal'] == 1 :
                gold_signal = True
                dead_signal = False
                relate.loc[relate.index[idx], ['P_assert', 'Y_assert']] = [0.5 * relate.loc[
                    today, 'profit_history'] * (1 - P_cost.iloc[0]), 0.5 * relate.loc[
                                                                               today, 'profit_history'] * (
                                                                                       1 - Y_cost.iloc[0])]
                gold_atr_threshold = relate.loc[today, 'clean'] - 2 * relate.loc[today, 'ATR']
            if relate.loc[today, 'signal'] == -1 :
                gold_signal = False
                dead_signal = True

                relate.loc[relate.index[idx], ['P_assert', 'Y_assert']] = [0.5 * relate.loc[
                    today, 'profit_history'] * (1 - P_cost.iloc[0]), 0.5 * relate.loc[
                                                                               today, 'profit_history'] * (
                                                                                       1 - Y_cost.iloc[0])]
                dead_atr_threshold = relate.loc[today, 'clean'] + 2 * relate.loc[today, 'ATR']
            if relate.loc[today, 'signal'] == 2:
                gold_signal = False
                dead_signal = False

    save_path = os.path.join('/content/drive/MyDrive/relate_future', relate_twin)
    make_dir(save_path)
    relate.to_csv(os.path.join(save_path, relate_twin + '_data.csv'), index=True)
    g_withdraw, g_high, g_low = withdraw(relate)
    mkt_plot(relate, save_path, relate_twin)
    mkt_profit_plot(relate, save_path, relate_twin, [g_withdraw, g_high, g_low])


def main():
    relate_list = os.listdir('/content/drive/MyDrive/new3')
    cost = pd.read_excel('/content/drive/MyDrive/cost.xlsx', index_col=0)
    for name in relate_list:
        #print(name)
        relate_twin= name.split('.')[0]
        #relate_twin = 'P_Y'
        MACD_BOTH_ATR(relate_twin, cost)


if __name__ == '__main__':
    main()
